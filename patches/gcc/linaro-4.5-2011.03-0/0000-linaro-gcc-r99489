revno: 99489 [merge]
fixes bug(s): https://launchpad.net/bugs/730440
committer: Andrew Stubbs <ams@codesourcery.com>
branch nick: gcc-linaro-4.5
timestamp: Fri 2011-03-11 17:36:50 +0000
message:
  Fix misuse of the movt instruction.
  
  LP:730440
diff:
=== modified file 'ChangeLog.linaro'
--- a/ChangeLog.linaro	2011-03-11 15:40:06 +0000
+++ b/ChangeLog.linaro	2011-03-11 17:36:50 +0000
@@ -1,3 +1,12 @@
+2011-03-10  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>
+
+	LP:730440
+	PR target/47668
+	gcc/
+	* config/arm/arm.md (arm_movtas_ze): Use 'L' instead of 'c'.
+	gcc/testsuite/
+	* gcc.target/arm/pr47688.c: New.
+
 2011-03-03  Richard Sandiford  <richard.sandiford@linaro.org>
 
 	gcc/

=== modified file 'gcc/config/arm/arm.md'
--- a/gcc/config/arm/arm.md	2011-03-01 14:32:39 +0000
+++ b/gcc/config/arm/arm.md	2011-03-11 14:26:34 +0000
@@ -11133,13 +11133,15 @@
   [(set_attr "conds" "clob")]
 )
 
+;; We only care about the lower 16 bits of the constant 
+;; being inserted into the upper 16 bits of the register.
 (define_insn "*arm_movtas_ze" 
   [(set (zero_extract:SI (match_operand:SI 0 "s_register_operand" "+r")
                    (const_int 16)
                    (const_int 16))
         (match_operand:SI 1 "const_int_operand" ""))]
   "arm_arch_thumb2"
-  "movt%?\t%0, %c1"
+  "movt%?\t%0, %L1"
  [(set_attr "predicable" "yes")
    (set_attr "length" "4")]
 )

=== added file 'gcc/testsuite/gcc.target/arm/pr47688.c'
--- a/gcc/testsuite/gcc.target/arm/pr47688.c	1970-01-01 00:00:00 +0000
+++ b/gcc/testsuite/gcc.target/arm/pr47688.c	2011-03-11 14:26:34 +0000
@@ -0,0 +1,26 @@
+/* { dg-options "-mthumb -O2" }  */
+/* { dg-require-effective-target arm_thumb2_ok } */
+/* { dg-final { scan-assembler-not "-32768" } } */
+
+typedef union
+{
+  unsigned long int u_32_value;
+  struct 
+  {
+    unsigned short int u_16_value_0;
+    unsigned short int u_16_value_1;
+  } u_16_values;
+} my_union;
+
+
+unsigned long int Test(const unsigned short int wXe)
+{
+  my_union dwCalcVal;
+  
+  dwCalcVal.u_16_values.u_16_value_0=wXe;
+  dwCalcVal.u_16_values.u_16_value_1=0x8000u;
+
+  dwCalcVal.u_32_value /=3;
+  
+  return (dwCalcVal.u_32_value);
+}
