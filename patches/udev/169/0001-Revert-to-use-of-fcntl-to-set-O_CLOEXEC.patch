From 1c68c702ae75f0ec8e04fa843dbb9b20dbba08e5 Mon Sep 17 00:00:00 2001
From: michaedw in build chroot <build@ctbu-bld5.cisco.com>
Date: Thu, 19 May 2011 05:09:52 +0000
Subject: [PATCH] Revert to use of fcntl() to set O_CLOEXEC

---
 libudev/libudev-ctrl.c    |    6 ++++--
 libudev/libudev-monitor.c |    6 ++++--
 libudev/libudev-private.h |    1 +
 libudev/libudev-util.c    |   13 +++++++++++++
 udev/sd-daemon.c          |    5 +++--
 udev/udev-watch.c         |    6 ++++--
 udev/udevadm-settle.c     |    3 ++-
 udev/udevd.c              |    4 +++-
 8 files changed, 34 insertions(+), 10 deletions(-)

diff --git a/libudev/libudev-ctrl.c b/libudev/libudev-ctrl.c
index 61e0243..9b42633 100644
--- a/libudev/libudev-ctrl.c
+++ b/libudev/libudev-ctrl.c
@@ -91,12 +91,13 @@ struct udev_ctrl *udev_ctrl_new_from_socket_fd(struct udev *udev, const char *so
 		return NULL;
 
 	if (fd < 0) {
-		uctrl->sock = socket(AF_LOCAL, SOCK_SEQPACKET|SOCK_NONBLOCK|SOCK_CLOEXEC, 0);
+		uctrl->sock = socket(AF_LOCAL, SOCK_SEQPACKET|SOCK_NONBLOCK, 0);
 		if (uctrl->sock < 0) {
 			err(udev, "error getting socket: %m\n");
 			udev_ctrl_unref(uctrl);
 			return NULL;
 		}
+		util_set_fd_cloexec(uctrl->sock);
 	} else {
 		uctrl->bound = true;
 		uctrl->sock = fd;
@@ -184,13 +185,14 @@ struct udev_ctrl_connection *udev_ctrl_get_connection(struct udev_ctrl *uctrl)
 	conn->refcount = 1;
 	conn->uctrl = uctrl;
 
-	conn->sock = accept4(uctrl->sock, NULL, NULL, SOCK_CLOEXEC|SOCK_NONBLOCK);
+	conn->sock = accept4(uctrl->sock, NULL, NULL, SOCK_NONBLOCK);
 	if (conn->sock < 0) {
 		if (errno != EINTR)
 			err(uctrl->udev, "unable to receive ctrl connection: %m\n");
 		free(conn);
 		return NULL;
 	}
+	util_set_fd_cloexec(conn->sock);
 
 	/* enable receiving of the sender credentials */
 	setsockopt(conn->sock, SOL_SOCKET, SO_PASSCRED, &on, sizeof(on));
diff --git a/libudev/libudev-monitor.c b/libudev/libudev-monitor.c
index 5917b9e..22dbf1d 100644
--- a/libudev/libudev-monitor.c
+++ b/libudev/libudev-monitor.c
@@ -145,12 +145,13 @@ struct udev_monitor *udev_monitor_new_from_socket(struct udev *udev, const char
 		util_strscpy(&udev_monitor->sun.sun_path[1], sizeof(udev_monitor->sun.sun_path)-1, socket_path);
 		udev_monitor->addrlen = offsetof(struct sockaddr_un, sun_path) + strlen(socket_path)+1;
 	}
-	udev_monitor->sock = socket(AF_LOCAL, SOCK_DGRAM|SOCK_NONBLOCK|SOCK_CLOEXEC, 0);
+	udev_monitor->sock = socket(AF_LOCAL, SOCK_DGRAM|SOCK_NONBLOCK, 0);
 	if (udev_monitor->sock == -1) {
 		err(udev, "error getting socket: %m\n");
 		free(udev_monitor);
 		return NULL;
 	}
+	util_set_fd_cloexec(udev_monitor->sock);
 
 	dbg(udev, "monitor %p created with '%s'\n", udev_monitor, socket_path);
 	return udev_monitor;
@@ -178,12 +179,13 @@ struct udev_monitor *udev_monitor_new_from_netlink_fd(struct udev *udev, const c
 		return NULL;
 
 	if (fd < 0) {
-		udev_monitor->sock = socket(PF_NETLINK, SOCK_RAW|SOCK_CLOEXEC, NETLINK_KOBJECT_UEVENT);
+		udev_monitor->sock = socket(PF_NETLINK, SOCK_RAW, NETLINK_KOBJECT_UEVENT);
 		if (udev_monitor->sock == -1) {
 			err(udev, "error getting socket: %m\n");
 			free(udev_monitor);
 			return NULL;
 		}
+		util_set_fd_cloexec(udev_monitor->sock);
 	} else {
 		udev_monitor->bound = true;
 		udev_monitor->sock = fd;
diff --git a/libudev/libudev-private.h b/libudev/libudev-private.h
index 39b46dd..d1c19d0 100644
--- a/libudev/libudev-private.h
+++ b/libudev/libudev-private.h
@@ -230,6 +230,7 @@ int udev_util_replace_chars(char *str, const char *white);
 int udev_util_encode_string(const char *str, char *str_enc, size_t len);
 unsigned int util_string_hash32(const char *key);
 uint64_t util_string_bloom64(const char *str);
+void util_set_fd_cloexec(int fd);
 
 /* libudev-util-private.c */
 int util_create_path(struct udev *udev, const char *path);
diff --git a/libudev/libudev-util.c b/libudev/libudev-util.c
index 48eea0b..580cc51 100644
--- a/libudev/libudev-util.c
+++ b/libudev/libudev-util.c
@@ -537,6 +537,19 @@ static unsigned int murmur_hash2(const char *key, int len, unsigned int seed)
 	return h;
 }
 
+void util_set_fd_cloexec(int fd)
+{
+	int flags;
+
+	flags = fcntl(fd, F_GETFD);
+	if (flags < 0)
+		flags = FD_CLOEXEC;
+	else
+		flags |= FD_CLOEXEC;
+	fcntl(fd, F_SETFD, flags);
+}
+
+
 unsigned int util_string_hash32(const char *str)
 {
 	return murmur_hash2(str, strlen(str), 0);
diff --git a/udev/sd-daemon.c b/udev/sd-daemon.c
index 6d1eebf..820374b 100644
--- a/udev/sd-daemon.c
+++ b/udev/sd-daemon.c
@@ -326,7 +326,7 @@ int sd_is_socket_unix(int fd, int type, int listening, const char *path, size_t
 }
 
 int sd_notify(int unset_environment, const char *state) {
-#if defined(DISABLE_SYSTEMD) || !defined(__linux__) || !defined(SOCK_CLOEXEC)
+#if defined(DISABLE_SYSTEMD) || !defined(__linux__)
         return 0;
 #else
         int fd = -1, r;
@@ -349,10 +349,11 @@ int sd_notify(int unset_environment, const char *state) {
                 goto finish;
         }
 
-        if ((fd = socket(AF_UNIX, SOCK_DGRAM|SOCK_CLOEXEC, 0)) < 0) {
+        if ((fd = socket(AF_UNIX, SOCK_DGRAM, 0)) < 0) {
                 r = -errno;
                 goto finish;
         }
+        util_set_fd_cloexec(fd);
 
         memset(&sockaddr, 0, sizeof(sockaddr));
         sockaddr.sa.sa_family = AF_UNIX;
diff --git a/udev/udev-watch.c b/udev/udev-watch.c
index 0ec8bfd..9351f8a 100644
--- a/udev/udev-watch.c
+++ b/udev/udev-watch.c
@@ -38,8 +38,10 @@ static int inotify_fd = -1;
  */
 int udev_watch_init(struct udev *udev)
 {
-	inotify_fd = inotify_init1(IN_CLOEXEC);
-	if (inotify_fd < 0)
+	inotify_fd = inotify_init();
+	if (inotify_fd >= 0)
+		util_set_fd_cloexec(inotify_fd);
+	else
 		err(udev, "inotify_init failed: %m\n");
 	return inotify_fd;
 }
diff --git a/udev/udevadm-settle.c b/udev/udevadm-settle.c
index b17ba80..b6c770d 100644
--- a/udev/udevadm-settle.c
+++ b/udev/udevadm-settle.c
@@ -149,10 +149,11 @@ int udevadm_settle(struct udev *udev, int argc, char *argv[])
 	}
 
 	pfd[0].events = POLLIN;
-	pfd[0].fd = inotify_init1(IN_CLOEXEC);
+	pfd[0].fd = inotify_init();
 	if (pfd[0].fd < 0) {
 		err(udev, "inotify_init failed: %m\n");
 	} else {
+		util_set_fd_cloexec(pfd[0].fd);
 		if (inotify_add_watch(pfd[0].fd, udev_get_run_path(udev), IN_MOVED_TO) < 0) {
 			err(udev, "watching '%s' failed\n", udev_get_run_path(udev));
 			close(pfd[0].fd);
diff --git a/udev/udevd.c b/udev/udevd.c
index e7384e1..19fab5a 100644
--- a/udev/udevd.c
+++ b/udev/udevd.c
@@ -215,6 +215,7 @@ static void worker_new(struct event *event)
 	/* allow the main daemon netlink address to send devices to the worker */
 	udev_monitor_allow_unicast_sender(worker_monitor, monitor);
 	udev_monitor_enable_receiving(worker_monitor);
+	util_set_fd_cloexec(udev_monitor_get_fd(worker_monitor));
 
 	worker = calloc(1, sizeof(struct worker));
 	if (worker == NULL) {
@@ -1511,12 +1512,13 @@ int main(int argc, char *argv[])
 	}
 
 	/* unnamed socket from workers to the main daemon */
-	if (socketpair(AF_LOCAL, SOCK_DGRAM|SOCK_CLOEXEC, 0, worker_watch) < 0) {
+	if (socketpair(AF_LOCAL, SOCK_DGRAM, 0, worker_watch) < 0) {
 		fprintf(stderr, "error creating socketpair\n");
 		err(udev, "error creating socketpair\n");
 		rc = 6;
 		goto exit;
 	}
+	util_set_fd_cloexec(worker_watch[WRITE_END]);
 	fd_worker = worker_watch[READ_END];
 
 	rules = udev_rules_new(udev, resolve_names);
-- 
1.7.0.4

